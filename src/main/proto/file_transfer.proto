syntax = "proto3";

package grpc;

message RequestFileList {
    bool isClient=1;		// true then client else other team
}

message FileInfo {
    string fileName = 1;		// teamname_fileid (unique)
}

message FileUploadInfo {
    string fileName = 1;		// teamname_fileid (unique)
    float fileSize = 2;
    int64 maxChunks = 3;
}

message ChunkInfo {
    string fileName = 1;
    int64 chunkId = 2;			// Starts from 0 - N
    int64 startSeqNum = 3;
}

message FileMetaData {
    string fileName = 1;
    int64 chunkId = 2;
    bytes data = 3;
    int64 seqNum = 4;
    int64 seqMax = 5;
}

message FileUploadData {
    string fileName = 1;
    int64 chunkId =2;		// Required to upload file parallely
    bytes data = 3;
    int64 seqNum = 4;
    int64 seqMax = 5;
    int64 maxChunks = 6;
}

message  ProxyInfo {
    string ip = 1;
    string port = 2;
}

message FileLocationInfo {
    string fileName = 1;
    int64 maxChunks = 2;
    repeated ProxyInfo lstProxy = 3;
    bool isFileFound = 4;
}

message FileList {
    repeated string lstFileNames = 1;
}

message ProxyList {
    repeated ProxyInfo lstProxy = 1;
}

service DataTransferService {

    // From team's client to team's own cluster
    rpc RequestFileInfo (FileInfo) returns (FileLocationInfo);

    // From team-1 cluster to rest of the nodes of other teams
    rpc GetFileLocation (FileInfo) returns (FileLocationInfo);

    // From team's client to the actual data-center node (can be any team's node)
    rpc DownloadChunk (ChunkInfo) returns (stream FileMetaData);

    rpc UploadFile (stream FileUploadData) returns (FileInfo);

    // Interteam request
    rpc ListFiles (RequestFileList) returns (FileList);


    // Request File upload get back proxy list to
    // return proxylist when raft consensus is reached
    rpc RequestFileUpload(FileUploadInfo) returns (ProxyList);
}